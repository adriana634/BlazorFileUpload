@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h1>Upload files!</h1>

<div @ref="dropZoneElement" class="drop-zone">
    <p>Drop a file or paste an image from the clipboard or select a file using the input</p>
    <InputFile OnChange="@OnChange" @ref="inputFile" accept="image/png, image/jpeg" />
</div>

<img src="@src" />

@code {
    private ElementReference dropZoneElement;
    private InputFile inputFile;

    private IJSObjectReference module;
    private IJSObjectReference dropZoneInstance;

    private string src;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            // Load the JS file
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");

            // Initialize the drop zone
            dropZoneInstance = await module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    // Called when a new file is uploaded
    private async Task OnChange(InputFileChangeEventArgs e) 
    {
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        src = "data:" + e.File.ContentType + ";base64," + Convert.ToBase64String(ms.ToArray());
    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {
        if (dropZoneInstance != null)
        {
            await dropZoneInstance.InvokeVoidAsync("dispose");
            await dropZoneInstance.DisposeAsync();
        }

        if (module != null)
        {
            await module.DisposeAsync();
        }
    }
}